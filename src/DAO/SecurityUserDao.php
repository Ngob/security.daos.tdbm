<?php

/*
 * This file has been automatically generated by TDBM.
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the UserDao class instead!
 */

namespace Mouf\Security\DAO;

use Mouf\Database\TDBM\TDBMService;
use Mouf\Database\TDBM\ResultIterator;
use Mouf\Database\TDBM\ArrayIterator;
use Kls\Model\Bean\UserBean;
use Mouf\Security\UserService\UserDaoInterface;
use Mouf\Security\UserService\UserInterface;


/**
 * This class provides a TDBM implementation of the UserDaoInterface
 *
 */
class SecurityUserDao implements UserDaoInterface
{

    /**
     * @var TDBMService
     */
    protected $tdbmService;

    /**
     * Sets the TDBM service used by this DAO.
     *
     * @param TDBMService $tdbmService
     */
    public function __construct(TDBMService $tdbmService)
    {
        $this->tdbmService = $tdbmService;
    }


    /**
     * Returns a user from its login and its password, or null if the login or credentials are false.
     *
     * @param string $login
     * @param string $password
     * @return UserInterface
     */
    public function getUserByCredentials($login, $password)
    {
        $user = $this->findOne([ 'login' => $login ]);
        if ($user === null) {
            return null;
        }

        if (password_verify($password, $user->getPassword())) {
            return $user;
        } else {
            return NULL;
        }
    }

    /**
     * Returns a user from its token.
     *
     * @param string $token
     * @return UserInterface
     */
    public function getUserByToken($token)
    {
        return $this->findOne([ 'token' => $token ]);
    }

    /**
     * Discards a token.
     *
     * @param string $token
     */
    public function discardToken($token)
    {
        $user = $this->getUserByToken($token);
        $user->setToken(null);
        $this->tdbmService->save($user);
    }

    /**
     * Returns a user from its ID
     *
     * @param string $id
     * @return UserInterface
     */
    public function getUserById($id)
    {
        return $this->tdbmService->findObjectByPk('users', ['id' => $id], [], false);
    }

    /**
     * Returns a user from its login
     *
     * @param string $login
     * @return UserInterface
     */
    public function getUserByLogin($login)
    {
        return $this->findOne([ 'login' => $login ]);
    }

    /**
     * Get a single UserBean specified by its filters.
     *
     * @param mixed $filter The filter bag (see TDBMService::findObjects for complete description)
     * @param array $parameters The parameters associated with the filter
     * @return UserBean
     */
    private function findOne($filter=null, array $parameters = [])
    {
        return $this->tdbmService->findObject('users', $filter, $parameters);
    }
}
