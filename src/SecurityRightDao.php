<?php

/*
 * This file has been automatically generated by TDBM.
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the UserDao class instead!
 */

namespace Mouf\Security\DAO;

use Kls\Model\Bean\RolesRightBean;
use Mouf\Database\TDBM\TDBMService;
use Mouf\Database\TDBM\ResultIterator;
use Mouf\Database\TDBM\ArrayIterator;
use Mouf\Security\RightsService\RightInterface;
use Mouf\Security\RightsService\RightsDaoInterface;
use Mouf\Security\UserService\UserDaoInterface;
use Mouf\Security\UserService\UserInterface;


/**
 * This class provides a TDBM implementation of the UserDaoInterface
 *
 */
class SecurityRightDao implements RightsDaoInterface
{

    /**
     * @var TDBMService
     */
    protected $tdbmService;

    /**
     * The list of all supported rights in the application, indexed by right name.
     *
     * @var RightInterface[]
     */
    protected $rights;

    /**
     * Sets the TDBM service used by this DAO.
     *
     * @param RightInterface[] $rights The list of all supported rights in the application.
     */
    public function __construct(TDBMService $tdbmService, array $rights)
    {
        $this->tdbmService = $tdbmService;
        $this->rights = [];
        foreach ($rights as $right) {
            $this->rights[$right->getName()] = $right;
        }
    }


    /**
     * Returns a list of all the rights for the user passed in parameter.
     *
     * @param string $user_id
     * @return array<RightInterface>
     */
    public function getRightsForUser($user_id)
    {
        $roleRights = $this->find([
            'users.id' => $user_id
        ]);

        $rights = [];

        foreach ($roleRights as $roleRight) {
            $key = $roleRight->getRightKey();
            if (!isset($this->rights[$key])) {
                throw new \RuntimeException(sprintf('User with ID %s has a right in database %s that does not exists in the SecurityRightDao.', $user_id, $key));
            }
            $rights[] = $this->rights[$key];
        }

        return $rights;
    }

    /**
     * Returns the RightInterface object associated to the user (or null if the
     * user has no such right).
     *
     * @param string $user_id
     * @param string $right
     * @return RightInterface
     */
    public function getRightForUser($user_id, $right)
    {
        $roleRight = $this->findOne([
            'users.id' => $user_id,
            'right_key' => $right
        ]);

        if ($roleRight === null) {
            return null;
        }

        $key = $roleRight->getRightKey();
        if (!isset($this->rights[$key])) {
            throw new \RuntimeException(sprintf('User with ID %s has a right in database %s that does not exists in the SecurityRightDao.', $user_id, $key));
        }
        return $this->rights[$key];
    }

    /**
     * Get a list of RolesRightBean specified by its filters.
     *
     * @param mixed $filter The filter bag (see TDBMService::findObjects for complete description)
     * @param array $parameters The parameters associated with the filter
     * @param mixed $orderBy The order string
     * @param array $additionalTablesFetch A list of additional tables to fetch (for performance improvement)
     * @param int $mode Either TDBMService::MODE_ARRAY or TDBMService::MODE_CURSOR (for large datasets). Defaults to TDBMService::MODE_ARRAY.
     * @return RolesRightBean[]|ResultIterator|ResultArray
     */
    private function find($filter = null, array $parameters = [], $orderBy=null, array $additionalTablesFetch = [], $mode = null)
    {
        return $this->tdbmService->findObjects('roles_rights', $filter, $parameters, $orderBy, $additionalTablesFetch, $mode);
    }

    /**
     * Get a single RolesRightBean specified by its filters.
     *
     * @param mixed $filter The filter bag (see TDBMService::findObjects for complete description)
     * @param array $parameters The parameters associated with the filter
     * @return RolesRightBean
     */
    private function findOne($filter=null, array $parameters = [])
    {
        return $this->tdbmService->findObject('roles_rights', $filter, $parameters);
    }
}
